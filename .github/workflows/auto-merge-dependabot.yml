name: Auto-merge Dependabot PRs

on:
  pull_request:
    types: [opened, synchronize, review_requested]

jobs:
  auto-merge:
    if: github.actor == 'dependabot[bot]'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: write
      statuses: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Auto-approve and merge Dependabot PRs
        uses: actions/github-script@v8
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            console.log(`Processing Dependabot PR #${context.issue.number}: ${pr.title}`);
            
            // Check if PR is ready to merge
            if (pr.mergeable_state === 'clean' || pr.mergeable_state === 'unstable') {
              console.log('PR is ready to merge, proceeding...');
              
              // Approve the PR as a code owner
              try {
                await github.rest.pulls.createReview({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.issue.number,
                  event: 'APPROVE',
                  body: 'ðŸ¤– Auto-approved by Dependabot auto-merge workflow'
                });
                console.log('PR approved successfully');
              } catch (error) {
                console.log('Approval failed, but continuing with merge:', error.message);
              }
              
              // Wait a moment for approval to process
              await new Promise(resolve => setTimeout(resolve, 2000));
              
              // Merge the PR
              try {
                await github.rest.pulls.merge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.issue.number,
                  merge_method: 'squash',
                  commit_title: `deps: ${pr.title}`,
                  commit_message: `Automatically merged Dependabot PR #${context.issue.number}\n\n${pr.body || ''}`
                });
                console.log('PR merged successfully');
                
                // Delete the source branch
                try {
                  await github.rest.git.deleteRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `heads/${pr.head.ref}`
                  });
                  console.log(`Branch ${pr.head.ref} deleted successfully`);
                } catch (deleteError) {
                  console.log('Branch deletion failed (may not have permission):', deleteError.message);
                }
                
              } catch (mergeError) {
                console.log('Merge failed:', mergeError.message);
                throw mergeError;
              }
            } else {
              console.log(`PR not ready to merge. State: ${pr.mergeable_state}`);
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
