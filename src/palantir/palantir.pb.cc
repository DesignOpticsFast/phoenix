// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: palantir.proto

#include "palantir.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace palantir {
constexpr JobId::JobId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct JobIdDefaultTypeInternal {
  constexpr JobIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JobIdDefaultTypeInternal() {}
  union {
    JobId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JobIdDefaultTypeInternal _JobId_default_instance_;
constexpr ComputeSpec_ParamsEntry_DoNotUse::ComputeSpec_ParamsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ComputeSpec_ParamsEntry_DoNotUseDefaultTypeInternal {
  constexpr ComputeSpec_ParamsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ComputeSpec_ParamsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ComputeSpec_ParamsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ComputeSpec_ParamsEntry_DoNotUseDefaultTypeInternal _ComputeSpec_ParamsEntry_DoNotUse_default_instance_;
constexpr ComputeSpec::ComputeSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : params_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , feature_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , deadline_ms_(0)
  , produce_debug_(false){}
struct ComputeSpecDefaultTypeInternal {
  constexpr ComputeSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ComputeSpecDefaultTypeInternal() {}
  union {
    ComputeSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ComputeSpecDefaultTypeInternal _ComputeSpec_default_instance_;
constexpr StartReply::StartReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , job_id_(nullptr){}
struct StartReplyDefaultTypeInternal {
  constexpr StartReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StartReplyDefaultTypeInternal() {}
  union {
    StartReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StartReplyDefaultTypeInternal _StartReply_default_instance_;
constexpr Progress::Progress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , job_id_(nullptr)
  , progress_pct_(0){}
struct ProgressDefaultTypeInternal {
  constexpr ProgressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProgressDefaultTypeInternal() {}
  union {
    Progress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProgressDefaultTypeInternal _Progress_default_instance_;
constexpr ResultMeta::ResultMeta(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shape_()
  , _shape_cached_byte_size_(0)
  , labels_()
  , status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dtype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , job_id_(nullptr)
  , compute_elapsed_ms_(int64_t{0})
  , bytes_total_(int64_t{0}){}
struct ResultMetaDefaultTypeInternal {
  constexpr ResultMetaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResultMetaDefaultTypeInternal() {}
  union {
    ResultMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResultMetaDefaultTypeInternal _ResultMeta_default_instance_;
constexpr DataChunk::DataChunk(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , job_id_(nullptr)
  , chunk_index_(0)
  , total_chunks_(0){}
struct DataChunkDefaultTypeInternal {
  constexpr DataChunkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataChunkDefaultTypeInternal() {}
  union {
    DataChunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataChunkDefaultTypeInternal _DataChunk_default_instance_;
constexpr Cancel::Cancel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : job_id_(nullptr){}
struct CancelDefaultTypeInternal {
  constexpr CancelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CancelDefaultTypeInternal() {}
  union {
    Cancel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CancelDefaultTypeInternal _Cancel_default_instance_;
constexpr StartJob::StartJob(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : job_id_(nullptr)
  , spec_(nullptr){}
struct StartJobDefaultTypeInternal {
  constexpr StartJobDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StartJobDefaultTypeInternal() {}
  union {
    StartJob _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StartJobDefaultTypeInternal _StartJob_default_instance_;
constexpr CapabilitiesRequest::CapabilitiesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CapabilitiesRequestDefaultTypeInternal {
  constexpr CapabilitiesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CapabilitiesRequestDefaultTypeInternal() {}
  union {
    CapabilitiesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CapabilitiesRequestDefaultTypeInternal _CapabilitiesRequest_default_instance_;
constexpr Capabilities::Capabilities(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : supported_features_()
  , protocol_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , max_concurrency_(0){}
struct CapabilitiesDefaultTypeInternal {
  constexpr CapabilitiesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CapabilitiesDefaultTypeInternal() {}
  union {
    Capabilities _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CapabilitiesDefaultTypeInternal _Capabilities_default_instance_;
constexpr Pong::Pong(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_ms_(int64_t{0}){}
struct PongDefaultTypeInternal {
  constexpr PongDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PongDefaultTypeInternal() {}
  union {
    Pong _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PongDefaultTypeInternal _Pong_default_instance_;
constexpr XYSineSpec::XYSineSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : amplitude_(0)
  , frequency_(0)
  , phase_(0)
  , cycles_(0)
  , n_samples_(0){}
struct XYSineSpecDefaultTypeInternal {
  constexpr XYSineSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~XYSineSpecDefaultTypeInternal() {}
  union {
    XYSineSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT XYSineSpecDefaultTypeInternal _XYSineSpec_default_instance_;
constexpr XYSineResult::XYSineResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_values_()
  , y_values_()
  , series_points_(0)
  , series_points_effective_(0)
  , downsampling_enabled_(false){}
struct XYSineResultDefaultTypeInternal {
  constexpr XYSineResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~XYSineResultDefaultTypeInternal() {}
  union {
    XYSineResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT XYSineResultDefaultTypeInternal _XYSineResult_default_instance_;
}  // namespace palantir
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_palantir_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_palantir_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_palantir_2eproto = nullptr;

const uint32_t TableStruct_palantir_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palantir::JobId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palantir::JobId, id_),
  PROTOBUF_FIELD_OFFSET(::palantir::ComputeSpec_ParamsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::palantir::ComputeSpec_ParamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palantir::ComputeSpec_ParamsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::palantir::ComputeSpec_ParamsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::palantir::ComputeSpec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::palantir::ComputeSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palantir::ComputeSpec, feature_id_),
  PROTOBUF_FIELD_OFFSET(::palantir::ComputeSpec, params_),
  PROTOBUF_FIELD_OFFSET(::palantir::ComputeSpec, deadline_ms_),
  PROTOBUF_FIELD_OFFSET(::palantir::ComputeSpec, produce_debug_),
  ~0u,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::palantir::StartReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::palantir::StartReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palantir::StartReply, job_id_),
  PROTOBUF_FIELD_OFFSET(::palantir::StartReply, status_),
  PROTOBUF_FIELD_OFFSET(::palantir::StartReply, error_message_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::palantir::Progress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::palantir::Progress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palantir::Progress, job_id_),
  PROTOBUF_FIELD_OFFSET(::palantir::Progress, progress_pct_),
  PROTOBUF_FIELD_OFFSET(::palantir::Progress, status_),
  PROTOBUF_FIELD_OFFSET(::palantir::Progress, message_),
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::palantir::ResultMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::palantir::ResultMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palantir::ResultMeta, job_id_),
  PROTOBUF_FIELD_OFFSET(::palantir::ResultMeta, status_),
  PROTOBUF_FIELD_OFFSET(::palantir::ResultMeta, dtype_),
  PROTOBUF_FIELD_OFFSET(::palantir::ResultMeta, shape_),
  PROTOBUF_FIELD_OFFSET(::palantir::ResultMeta, compute_elapsed_ms_),
  PROTOBUF_FIELD_OFFSET(::palantir::ResultMeta, bytes_total_),
  PROTOBUF_FIELD_OFFSET(::palantir::ResultMeta, labels_),
  PROTOBUF_FIELD_OFFSET(::palantir::ResultMeta, error_message_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palantir::DataChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palantir::DataChunk, job_id_),
  PROTOBUF_FIELD_OFFSET(::palantir::DataChunk, chunk_index_),
  PROTOBUF_FIELD_OFFSET(::palantir::DataChunk, total_chunks_),
  PROTOBUF_FIELD_OFFSET(::palantir::DataChunk, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palantir::Cancel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palantir::Cancel, job_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palantir::StartJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palantir::StartJob, job_id_),
  PROTOBUF_FIELD_OFFSET(::palantir::StartJob, spec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palantir::CapabilitiesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palantir::Capabilities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palantir::Capabilities, max_concurrency_),
  PROTOBUF_FIELD_OFFSET(::palantir::Capabilities, supported_features_),
  PROTOBUF_FIELD_OFFSET(::palantir::Capabilities, protocol_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palantir::Pong, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palantir::Pong, timestamp_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palantir::XYSineSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palantir::XYSineSpec, amplitude_),
  PROTOBUF_FIELD_OFFSET(::palantir::XYSineSpec, frequency_),
  PROTOBUF_FIELD_OFFSET(::palantir::XYSineSpec, phase_),
  PROTOBUF_FIELD_OFFSET(::palantir::XYSineSpec, cycles_),
  PROTOBUF_FIELD_OFFSET(::palantir::XYSineSpec, n_samples_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palantir::XYSineResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palantir::XYSineResult, x_values_),
  PROTOBUF_FIELD_OFFSET(::palantir::XYSineResult, y_values_),
  PROTOBUF_FIELD_OFFSET(::palantir::XYSineResult, series_points_),
  PROTOBUF_FIELD_OFFSET(::palantir::XYSineResult, series_points_effective_),
  PROTOBUF_FIELD_OFFSET(::palantir::XYSineResult, downsampling_enabled_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::palantir::JobId)},
  { 7, 15, -1, sizeof(::palantir::ComputeSpec_ParamsEntry_DoNotUse)},
  { 17, 27, -1, sizeof(::palantir::ComputeSpec)},
  { 31, 40, -1, sizeof(::palantir::StartReply)},
  { 43, 53, -1, sizeof(::palantir::Progress)},
  { 57, 71, -1, sizeof(::palantir::ResultMeta)},
  { 79, -1, -1, sizeof(::palantir::DataChunk)},
  { 89, -1, -1, sizeof(::palantir::Cancel)},
  { 96, -1, -1, sizeof(::palantir::StartJob)},
  { 104, -1, -1, sizeof(::palantir::CapabilitiesRequest)},
  { 110, -1, -1, sizeof(::palantir::Capabilities)},
  { 119, -1, -1, sizeof(::palantir::Pong)},
  { 126, -1, -1, sizeof(::palantir::XYSineSpec)},
  { 137, -1, -1, sizeof(::palantir::XYSineResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palantir::_JobId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palantir::_ComputeSpec_ParamsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palantir::_ComputeSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palantir::_StartReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palantir::_Progress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palantir::_ResultMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palantir::_DataChunk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palantir::_Cancel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palantir::_StartJob_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palantir::_CapabilitiesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palantir::_Capabilities_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palantir::_Pong_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palantir::_XYSineSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::palantir::_XYSineResult_default_instance_),
};

const char descriptor_table_protodef_palantir_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016palantir.proto\022\010palantir\"\023\n\005JobId\022\n\n\002i"
  "d\030\001 \001(\t\"\333\001\n\013ComputeSpec\022\022\n\nfeature_id\030\001 "
  "\001(\t\0221\n\006params\030\002 \003(\0132!.palantir.ComputeSp"
  "ec.ParamsEntry\022\030\n\013deadline_ms\030\003 \001(\005H\000\210\001\001"
  "\022\032\n\rproduce_debug\030\004 \001(\010H\001\210\001\001\032-\n\013ParamsEn"
  "try\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001B\016\n\014_"
  "deadline_msB\020\n\016_produce_debug\"k\n\nStartRe"
  "ply\022\037\n\006job_id\030\001 \001(\0132\017.palantir.JobId\022\016\n\006"
  "status\030\002 \001(\t\022\032\n\rerror_message\030\003 \001(\tH\000\210\001\001"
  "B\020\n\016_error_message\"s\n\010Progress\022\037\n\006job_id"
  "\030\001 \001(\0132\017.palantir.JobId\022\024\n\014progress_pct\030"
  "\002 \001(\001\022\016\n\006status\030\003 \001(\t\022\024\n\007message\030\004 \001(\tH\000"
  "\210\001\001B\n\n\010_message\"\312\001\n\nResultMeta\022\037\n\006job_id"
  "\030\001 \001(\0132\017.palantir.JobId\022\016\n\006status\030\002 \001(\t\022"
  "\r\n\005dtype\030\003 \001(\t\022\r\n\005shape\030\004 \003(\005\022\032\n\022compute"
  "_elapsed_ms\030\005 \001(\003\022\023\n\013bytes_total\030\006 \001(\003\022\016"
  "\n\006labels\030\007 \003(\t\022\032\n\rerror_message\030\010 \001(\tH\000\210"
  "\001\001B\020\n\016_error_message\"e\n\tDataChunk\022\037\n\006job"
  "_id\030\001 \001(\0132\017.palantir.JobId\022\023\n\013chunk_inde"
  "x\030\002 \001(\005\022\024\n\014total_chunks\030\003 \001(\005\022\014\n\004data\030\004 "
  "\001(\014\")\n\006Cancel\022\037\n\006job_id\030\001 \001(\0132\017.palantir"
  ".JobId\"P\n\010StartJob\022\037\n\006job_id\030\001 \001(\0132\017.pal"
  "antir.JobId\022#\n\004spec\030\002 \001(\0132\025.palantir.Com"
  "puteSpec\"\025\n\023CapabilitiesRequest\"]\n\014Capab"
  "ilities\022\027\n\017max_concurrency\030\001 \001(\005\022\032\n\022supp"
  "orted_features\030\002 \003(\t\022\030\n\020protocol_version"
  "\030\003 \001(\t\"\034\n\004Pong\022\024\n\014timestamp_ms\030\001 \001(\003\"d\n\n"
  "XYSineSpec\022\021\n\tamplitude\030\001 \001(\001\022\021\n\tfrequen"
  "cy\030\002 \001(\001\022\r\n\005phase\030\003 \001(\001\022\016\n\006cycles\030\004 \001(\005\022"
  "\021\n\tn_samples\030\005 \001(\005\"\210\001\n\014XYSineResult\022\020\n\010x"
  "_values\030\001 \003(\001\022\020\n\010y_values\030\002 \003(\001\022\025\n\rserie"
  "s_points\030\003 \001(\005\022\037\n\027series_points_effectiv"
  "e\030\004 \001(\005\022\034\n\024downsampling_enabled\030\005 \001(\010b\006p"
  "roto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_palantir_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_palantir_2eproto = {
  false, false, 1325, descriptor_table_protodef_palantir_2eproto, "palantir.proto", 
  &descriptor_table_palantir_2eproto_once, nullptr, 0, 14,
  schemas, file_default_instances, TableStruct_palantir_2eproto::offsets,
  file_level_metadata_palantir_2eproto, file_level_enum_descriptors_palantir_2eproto, file_level_service_descriptors_palantir_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_palantir_2eproto_getter() {
  return &descriptor_table_palantir_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_palantir_2eproto(&descriptor_table_palantir_2eproto);
namespace palantir {

// ===================================================================

class JobId::_Internal {
 public:
};

JobId::JobId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palantir.JobId)
}
JobId::JobId(const JobId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palantir.JobId)
}

inline void JobId::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JobId::~JobId() {
  // @@protoc_insertion_point(destructor:palantir.JobId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JobId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JobId::ArenaDtor(void* object) {
  JobId* _this = reinterpret_cast< JobId* >(object);
  (void)_this;
}
void JobId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JobId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JobId::Clear() {
// @@protoc_insertion_point(message_clear_start:palantir.JobId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JobId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palantir.JobId.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JobId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palantir.JobId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palantir.JobId.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palantir.JobId)
  return target;
}

size_t JobId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palantir.JobId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JobId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JobId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JobId::GetClassData() const { return &_class_data_; }

void JobId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<JobId *>(to)->MergeFrom(
      static_cast<const JobId &>(from));
}


void JobId::MergeFrom(const JobId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palantir.JobId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JobId::CopyFrom(const JobId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palantir.JobId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobId::IsInitialized() const {
  return true;
}

void JobId::InternalSwap(JobId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata JobId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_palantir_2eproto_getter, &descriptor_table_palantir_2eproto_once,
      file_level_metadata_palantir_2eproto[0]);
}

// ===================================================================

ComputeSpec_ParamsEntry_DoNotUse::ComputeSpec_ParamsEntry_DoNotUse() {}
ComputeSpec_ParamsEntry_DoNotUse::ComputeSpec_ParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ComputeSpec_ParamsEntry_DoNotUse::MergeFrom(const ComputeSpec_ParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ComputeSpec_ParamsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_palantir_2eproto_getter, &descriptor_table_palantir_2eproto_once,
      file_level_metadata_palantir_2eproto[1]);
}

// ===================================================================

class ComputeSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<ComputeSpec>()._has_bits_);
  static void set_has_deadline_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_produce_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ComputeSpec::ComputeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  params_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palantir.ComputeSpec)
}
ComputeSpec::ComputeSpec(const ComputeSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  params_.MergeFrom(from.params_);
  feature_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    feature_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_feature_id().empty()) {
    feature_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_feature_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&deadline_ms_, &from.deadline_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&produce_debug_) -
    reinterpret_cast<char*>(&deadline_ms_)) + sizeof(produce_debug_));
  // @@protoc_insertion_point(copy_constructor:palantir.ComputeSpec)
}

inline void ComputeSpec::SharedCtor() {
feature_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  feature_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&deadline_ms_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&produce_debug_) -
    reinterpret_cast<char*>(&deadline_ms_)) + sizeof(produce_debug_));
}

ComputeSpec::~ComputeSpec() {
  // @@protoc_insertion_point(destructor:palantir.ComputeSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ComputeSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  feature_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ComputeSpec::ArenaDtor(void* object) {
  ComputeSpec* _this = reinterpret_cast< ComputeSpec* >(object);
  (void)_this;
  _this->params_. ~MapField();
}
inline void ComputeSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &ComputeSpec::ArenaDtor);
  }
}
void ComputeSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ComputeSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:palantir.ComputeSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  feature_id_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&deadline_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&produce_debug_) -
        reinterpret_cast<char*>(&deadline_ms_)) + sizeof(produce_debug_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComputeSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string feature_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_feature_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palantir.ComputeSpec.feature_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&params_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 deadline_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_deadline_ms(&has_bits);
          deadline_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool produce_debug = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_produce_debug(&has_bits);
          produce_debug_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComputeSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palantir.ComputeSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string feature_id = 1;
  if (!this->_internal_feature_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_feature_id().data(), static_cast<int>(this->_internal_feature_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palantir.ComputeSpec.feature_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_feature_id(), target);
  }

  // map<string, string> params = 2;
  if (!this->_internal_params().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "palantir.ComputeSpec.ParamsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "palantir.ComputeSpec.ParamsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_params().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_params().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_params().begin();
          it != this->_internal_params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ComputeSpec_ParamsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_params().begin();
          it != this->_internal_params().end(); ++it) {
        target = ComputeSpec_ParamsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // optional int32 deadline_ms = 3;
  if (_internal_has_deadline_ms()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_deadline_ms(), target);
  }

  // optional bool produce_debug = 4;
  if (_internal_has_produce_debug()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_produce_debug(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palantir.ComputeSpec)
  return target;
}

size_t ComputeSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palantir.ComputeSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> params = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_params_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_params().begin();
      it != this->_internal_params().end(); ++it) {
    total_size += ComputeSpec_ParamsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string feature_id = 1;
  if (!this->_internal_feature_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_feature_id());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 deadline_ms = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_deadline_ms());
    }

    // optional bool produce_debug = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComputeSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ComputeSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComputeSpec::GetClassData() const { return &_class_data_; }

void ComputeSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ComputeSpec *>(to)->MergeFrom(
      static_cast<const ComputeSpec &>(from));
}


void ComputeSpec::MergeFrom(const ComputeSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palantir.ComputeSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  if (!from._internal_feature_id().empty()) {
    _internal_set_feature_id(from._internal_feature_id());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      deadline_ms_ = from.deadline_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      produce_debug_ = from.produce_debug_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComputeSpec::CopyFrom(const ComputeSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palantir.ComputeSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComputeSpec::IsInitialized() const {
  return true;
}

void ComputeSpec::InternalSwap(ComputeSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  params_.InternalSwap(&other->params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &feature_id_, lhs_arena,
      &other->feature_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComputeSpec, produce_debug_)
      + sizeof(ComputeSpec::produce_debug_)
      - PROTOBUF_FIELD_OFFSET(ComputeSpec, deadline_ms_)>(
          reinterpret_cast<char*>(&deadline_ms_),
          reinterpret_cast<char*>(&other->deadline_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComputeSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_palantir_2eproto_getter, &descriptor_table_palantir_2eproto_once,
      file_level_metadata_palantir_2eproto[2]);
}

// ===================================================================

class StartReply::_Internal {
 public:
  using HasBits = decltype(std::declval<StartReply>()._has_bits_);
  static const ::palantir::JobId& job_id(const StartReply* msg);
  static void set_has_error_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::palantir::JobId&
StartReply::_Internal::job_id(const StartReply* msg) {
  return *msg->job_id_;
}
StartReply::StartReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palantir.StartReply)
}
StartReply::StartReply(const StartReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error_message()) {
    error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_message(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_job_id()) {
    job_id_ = new ::palantir::JobId(*from.job_id_);
  } else {
    job_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:palantir.StartReply)
}

inline void StartReply::SharedCtor() {
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
job_id_ = nullptr;
}

StartReply::~StartReply() {
  // @@protoc_insertion_point(destructor:palantir.StartReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StartReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete job_id_;
}

void StartReply::ArenaDtor(void* object) {
  StartReply* _this = reinterpret_cast< StartReply* >(object);
  (void)_this;
}
void StartReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartReply::Clear() {
// @@protoc_insertion_point(message_clear_start:palantir.StartReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_message_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && job_id_ != nullptr) {
    delete job_id_;
  }
  job_id_ = nullptr;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palantir.JobId job_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_job_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palantir.StartReply.status"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palantir.StartReply.error_message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palantir.StartReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palantir.JobId job_id = 1;
  if (this->_internal_has_job_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::job_id(this), target, stream);
  }

  // string status = 2;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palantir.StartReply.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  // optional string error_message = 3;
  if (_internal_has_error_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palantir.StartReply.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palantir.StartReply)
  return target;
}

size_t StartReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palantir.StartReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 2;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // optional string error_message = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .palantir.JobId job_id = 1;
  if (this->_internal_has_job_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *job_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StartReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartReply::GetClassData() const { return &_class_data_; }

void StartReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StartReply *>(to)->MergeFrom(
      static_cast<const StartReply &>(from));
}


void StartReply::MergeFrom(const StartReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palantir.StartReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_has_error_message()) {
    _internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_has_job_id()) {
    _internal_mutable_job_id()->::palantir::JobId::MergeFrom(from._internal_job_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartReply::CopyFrom(const StartReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palantir.StartReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartReply::IsInitialized() const {
  return true;
}

void StartReply::InternalSwap(StartReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, lhs_arena,
      &other->status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_message_, lhs_arena,
      &other->error_message_, rhs_arena
  );
  swap(job_id_, other->job_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_palantir_2eproto_getter, &descriptor_table_palantir_2eproto_once,
      file_level_metadata_palantir_2eproto[3]);
}

// ===================================================================

class Progress::_Internal {
 public:
  using HasBits = decltype(std::declval<Progress>()._has_bits_);
  static const ::palantir::JobId& job_id(const Progress* msg);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::palantir::JobId&
Progress::_Internal::job_id(const Progress* msg) {
  return *msg->job_id_;
}
Progress::Progress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palantir.Progress)
}
Progress::Progress(const Progress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_job_id()) {
    job_id_ = new ::palantir::JobId(*from.job_id_);
  } else {
    job_id_ = nullptr;
  }
  progress_pct_ = from.progress_pct_;
  // @@protoc_insertion_point(copy_constructor:palantir.Progress)
}

inline void Progress::SharedCtor() {
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&job_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&progress_pct_) -
    reinterpret_cast<char*>(&job_id_)) + sizeof(progress_pct_));
}

Progress::~Progress() {
  // @@protoc_insertion_point(destructor:palantir.Progress)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Progress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete job_id_;
}

void Progress::ArenaDtor(void* object) {
  Progress* _this = reinterpret_cast< Progress* >(object);
  (void)_this;
}
void Progress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Progress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Progress::Clear() {
// @@protoc_insertion_point(message_clear_start:palantir.Progress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && job_id_ != nullptr) {
    delete job_id_;
  }
  job_id_ = nullptr;
  progress_pct_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Progress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palantir.JobId job_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_job_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double progress_pct = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          progress_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palantir.Progress.status"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palantir.Progress.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Progress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palantir.Progress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palantir.JobId job_id = 1;
  if (this->_internal_has_job_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::job_id(this), target, stream);
  }

  // double progress_pct = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_progress_pct = this->_internal_progress_pct();
  uint64_t raw_progress_pct;
  memcpy(&raw_progress_pct, &tmp_progress_pct, sizeof(tmp_progress_pct));
  if (raw_progress_pct != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_progress_pct(), target);
  }

  // string status = 3;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palantir.Progress.status");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_status(), target);
  }

  // optional string message = 4;
  if (_internal_has_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palantir.Progress.message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palantir.Progress)
  return target;
}

size_t Progress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palantir.Progress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 3;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // optional string message = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .palantir.JobId job_id = 1;
  if (this->_internal_has_job_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *job_id_);
  }

  // double progress_pct = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_progress_pct = this->_internal_progress_pct();
  uint64_t raw_progress_pct;
  memcpy(&raw_progress_pct, &tmp_progress_pct, sizeof(tmp_progress_pct));
  if (raw_progress_pct != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Progress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Progress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Progress::GetClassData() const { return &_class_data_; }

void Progress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Progress *>(to)->MergeFrom(
      static_cast<const Progress &>(from));
}


void Progress::MergeFrom(const Progress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palantir.Progress)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_has_message()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_has_job_id()) {
    _internal_mutable_job_id()->::palantir::JobId::MergeFrom(from._internal_job_id());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_progress_pct = from._internal_progress_pct();
  uint64_t raw_progress_pct;
  memcpy(&raw_progress_pct, &tmp_progress_pct, sizeof(tmp_progress_pct));
  if (raw_progress_pct != 0) {
    _internal_set_progress_pct(from._internal_progress_pct());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Progress::CopyFrom(const Progress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palantir.Progress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Progress::IsInitialized() const {
  return true;
}

void Progress::InternalSwap(Progress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, lhs_arena,
      &other->status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Progress, progress_pct_)
      + sizeof(Progress::progress_pct_)
      - PROTOBUF_FIELD_OFFSET(Progress, job_id_)>(
          reinterpret_cast<char*>(&job_id_),
          reinterpret_cast<char*>(&other->job_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Progress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_palantir_2eproto_getter, &descriptor_table_palantir_2eproto_once,
      file_level_metadata_palantir_2eproto[4]);
}

// ===================================================================

class ResultMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<ResultMeta>()._has_bits_);
  static const ::palantir::JobId& job_id(const ResultMeta* msg);
  static void set_has_error_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::palantir::JobId&
ResultMeta::_Internal::job_id(const ResultMeta* msg) {
  return *msg->job_id_;
}
ResultMeta::ResultMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  shape_(arena),
  labels_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palantir.ResultMeta)
}
ResultMeta::ResultMeta(const ResultMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      shape_(from.shape_),
      labels_(from.labels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  dtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dtype().empty()) {
    dtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dtype(), 
      GetArenaForAllocation());
  }
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error_message()) {
    error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_message(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_job_id()) {
    job_id_ = new ::palantir::JobId(*from.job_id_);
  } else {
    job_id_ = nullptr;
  }
  ::memcpy(&compute_elapsed_ms_, &from.compute_elapsed_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&bytes_total_) -
    reinterpret_cast<char*>(&compute_elapsed_ms_)) + sizeof(bytes_total_));
  // @@protoc_insertion_point(copy_constructor:palantir.ResultMeta)
}

inline void ResultMeta::SharedCtor() {
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
dtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&job_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bytes_total_) -
    reinterpret_cast<char*>(&job_id_)) + sizeof(bytes_total_));
}

ResultMeta::~ResultMeta() {
  // @@protoc_insertion_point(destructor:palantir.ResultMeta)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResultMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dtype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete job_id_;
}

void ResultMeta::ArenaDtor(void* object) {
  ResultMeta* _this = reinterpret_cast< ResultMeta* >(object);
  (void)_this;
}
void ResultMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResultMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResultMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:palantir.ResultMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  labels_.Clear();
  status_.ClearToEmpty();
  dtype_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_message_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && job_id_ != nullptr) {
    delete job_id_;
  }
  job_id_ = nullptr;
  ::memset(&compute_elapsed_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bytes_total_) -
      reinterpret_cast<char*>(&compute_elapsed_ms_)) + sizeof(bytes_total_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResultMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palantir.JobId job_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_job_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palantir.ResultMeta.status"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dtype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_dtype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palantir.ResultMeta.dtype"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 shape = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 compute_elapsed_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          compute_elapsed_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 bytes_total = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          bytes_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string labels = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_labels();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palantir.ResultMeta.labels"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string error_message = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palantir.ResultMeta.error_message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResultMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palantir.ResultMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palantir.JobId job_id = 1;
  if (this->_internal_has_job_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::job_id(this), target, stream);
  }

  // string status = 2;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palantir.ResultMeta.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  // string dtype = 3;
  if (!this->_internal_dtype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dtype().data(), static_cast<int>(this->_internal_dtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palantir.ResultMeta.dtype");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dtype(), target);
  }

  // repeated int32 shape = 4;
  {
    int byte_size = _shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_shape(), byte_size, target);
    }
  }

  // int64 compute_elapsed_ms = 5;
  if (this->_internal_compute_elapsed_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_compute_elapsed_ms(), target);
  }

  // int64 bytes_total = 6;
  if (this->_internal_bytes_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_bytes_total(), target);
  }

  // repeated string labels = 7;
  for (int i = 0, n = this->_internal_labels_size(); i < n; i++) {
    const auto& s = this->_internal_labels(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palantir.ResultMeta.labels");
    target = stream->WriteString(7, s, target);
  }

  // optional string error_message = 8;
  if (_internal_has_error_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palantir.ResultMeta.error_message");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palantir.ResultMeta)
  return target;
}

size_t ResultMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palantir.ResultMeta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 shape = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string labels = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(labels_.size());
  for (int i = 0, n = labels_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      labels_.Get(i));
  }

  // string status = 2;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // string dtype = 3;
  if (!this->_internal_dtype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dtype());
  }

  // optional string error_message = 8;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .palantir.JobId job_id = 1;
  if (this->_internal_has_job_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *job_id_);
  }

  // int64 compute_elapsed_ms = 5;
  if (this->_internal_compute_elapsed_ms() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_compute_elapsed_ms());
  }

  // int64 bytes_total = 6;
  if (this->_internal_bytes_total() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_bytes_total());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResultMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResultMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResultMeta::GetClassData() const { return &_class_data_; }

void ResultMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResultMeta *>(to)->MergeFrom(
      static_cast<const ResultMeta &>(from));
}


void ResultMeta::MergeFrom(const ResultMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palantir.ResultMeta)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  labels_.MergeFrom(from.labels_);
  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  if (!from._internal_dtype().empty()) {
    _internal_set_dtype(from._internal_dtype());
  }
  if (from._internal_has_error_message()) {
    _internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_has_job_id()) {
    _internal_mutable_job_id()->::palantir::JobId::MergeFrom(from._internal_job_id());
  }
  if (from._internal_compute_elapsed_ms() != 0) {
    _internal_set_compute_elapsed_ms(from._internal_compute_elapsed_ms());
  }
  if (from._internal_bytes_total() != 0) {
    _internal_set_bytes_total(from._internal_bytes_total());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResultMeta::CopyFrom(const ResultMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palantir.ResultMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultMeta::IsInitialized() const {
  return true;
}

void ResultMeta::InternalSwap(ResultMeta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  shape_.InternalSwap(&other->shape_);
  labels_.InternalSwap(&other->labels_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, lhs_arena,
      &other->status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dtype_, lhs_arena,
      &other->dtype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_message_, lhs_arena,
      &other->error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResultMeta, bytes_total_)
      + sizeof(ResultMeta::bytes_total_)
      - PROTOBUF_FIELD_OFFSET(ResultMeta, job_id_)>(
          reinterpret_cast<char*>(&job_id_),
          reinterpret_cast<char*>(&other->job_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResultMeta::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_palantir_2eproto_getter, &descriptor_table_palantir_2eproto_once,
      file_level_metadata_palantir_2eproto[5]);
}

// ===================================================================

class DataChunk::_Internal {
 public:
  static const ::palantir::JobId& job_id(const DataChunk* msg);
};

const ::palantir::JobId&
DataChunk::_Internal::job_id(const DataChunk* msg) {
  return *msg->job_id_;
}
DataChunk::DataChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palantir.DataChunk)
}
DataChunk::DataChunk(const DataChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_job_id()) {
    job_id_ = new ::palantir::JobId(*from.job_id_);
  } else {
    job_id_ = nullptr;
  }
  ::memcpy(&chunk_index_, &from.chunk_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_chunks_) -
    reinterpret_cast<char*>(&chunk_index_)) + sizeof(total_chunks_));
  // @@protoc_insertion_point(copy_constructor:palantir.DataChunk)
}

inline void DataChunk::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&job_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_chunks_) -
    reinterpret_cast<char*>(&job_id_)) + sizeof(total_chunks_));
}

DataChunk::~DataChunk() {
  // @@protoc_insertion_point(destructor:palantir.DataChunk)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete job_id_;
}

void DataChunk::ArenaDtor(void* object) {
  DataChunk* _this = reinterpret_cast< DataChunk* >(object);
  (void)_this;
}
void DataChunk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:palantir.DataChunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && job_id_ != nullptr) {
    delete job_id_;
  }
  job_id_ = nullptr;
  ::memset(&chunk_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_chunks_) -
      reinterpret_cast<char*>(&chunk_index_)) + sizeof(total_chunks_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataChunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palantir.JobId job_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_job_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 chunk_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          chunk_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_chunks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          total_chunks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataChunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palantir.DataChunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palantir.JobId job_id = 1;
  if (this->_internal_has_job_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::job_id(this), target, stream);
  }

  // int32 chunk_index = 2;
  if (this->_internal_chunk_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chunk_index(), target);
  }

  // int32 total_chunks = 3;
  if (this->_internal_total_chunks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_chunks(), target);
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palantir.DataChunk)
  return target;
}

size_t DataChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palantir.DataChunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .palantir.JobId job_id = 1;
  if (this->_internal_has_job_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *job_id_);
  }

  // int32 chunk_index = 2;
  if (this->_internal_chunk_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_chunk_index());
  }

  // int32 total_chunks = 3;
  if (this->_internal_total_chunks() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_total_chunks());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataChunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataChunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataChunk::GetClassData() const { return &_class_data_; }

void DataChunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DataChunk *>(to)->MergeFrom(
      static_cast<const DataChunk &>(from));
}


void DataChunk::MergeFrom(const DataChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palantir.DataChunk)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_has_job_id()) {
    _internal_mutable_job_id()->::palantir::JobId::MergeFrom(from._internal_job_id());
  }
  if (from._internal_chunk_index() != 0) {
    _internal_set_chunk_index(from._internal_chunk_index());
  }
  if (from._internal_total_chunks() != 0) {
    _internal_set_total_chunks(from._internal_total_chunks());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataChunk::CopyFrom(const DataChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palantir.DataChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataChunk::IsInitialized() const {
  return true;
}

void DataChunk::InternalSwap(DataChunk* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataChunk, total_chunks_)
      + sizeof(DataChunk::total_chunks_)
      - PROTOBUF_FIELD_OFFSET(DataChunk, job_id_)>(
          reinterpret_cast<char*>(&job_id_),
          reinterpret_cast<char*>(&other->job_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataChunk::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_palantir_2eproto_getter, &descriptor_table_palantir_2eproto_once,
      file_level_metadata_palantir_2eproto[6]);
}

// ===================================================================

class Cancel::_Internal {
 public:
  static const ::palantir::JobId& job_id(const Cancel* msg);
};

const ::palantir::JobId&
Cancel::_Internal::job_id(const Cancel* msg) {
  return *msg->job_id_;
}
Cancel::Cancel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palantir.Cancel)
}
Cancel::Cancel(const Cancel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_job_id()) {
    job_id_ = new ::palantir::JobId(*from.job_id_);
  } else {
    job_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:palantir.Cancel)
}

inline void Cancel::SharedCtor() {
job_id_ = nullptr;
}

Cancel::~Cancel() {
  // @@protoc_insertion_point(destructor:palantir.Cancel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Cancel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete job_id_;
}

void Cancel::ArenaDtor(void* object) {
  Cancel* _this = reinterpret_cast< Cancel* >(object);
  (void)_this;
}
void Cancel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Cancel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Cancel::Clear() {
// @@protoc_insertion_point(message_clear_start:palantir.Cancel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && job_id_ != nullptr) {
    delete job_id_;
  }
  job_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cancel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palantir.JobId job_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_job_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Cancel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palantir.Cancel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palantir.JobId job_id = 1;
  if (this->_internal_has_job_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::job_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palantir.Cancel)
  return target;
}

size_t Cancel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palantir.Cancel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .palantir.JobId job_id = 1;
  if (this->_internal_has_job_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *job_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Cancel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Cancel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Cancel::GetClassData() const { return &_class_data_; }

void Cancel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Cancel *>(to)->MergeFrom(
      static_cast<const Cancel &>(from));
}


void Cancel::MergeFrom(const Cancel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palantir.Cancel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_job_id()) {
    _internal_mutable_job_id()->::palantir::JobId::MergeFrom(from._internal_job_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Cancel::CopyFrom(const Cancel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palantir.Cancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cancel::IsInitialized() const {
  return true;
}

void Cancel::InternalSwap(Cancel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(job_id_, other->job_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Cancel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_palantir_2eproto_getter, &descriptor_table_palantir_2eproto_once,
      file_level_metadata_palantir_2eproto[7]);
}

// ===================================================================

class StartJob::_Internal {
 public:
  static const ::palantir::JobId& job_id(const StartJob* msg);
  static const ::palantir::ComputeSpec& spec(const StartJob* msg);
};

const ::palantir::JobId&
StartJob::_Internal::job_id(const StartJob* msg) {
  return *msg->job_id_;
}
const ::palantir::ComputeSpec&
StartJob::_Internal::spec(const StartJob* msg) {
  return *msg->spec_;
}
StartJob::StartJob(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palantir.StartJob)
}
StartJob::StartJob(const StartJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_job_id()) {
    job_id_ = new ::palantir::JobId(*from.job_id_);
  } else {
    job_id_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::palantir::ComputeSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:palantir.StartJob)
}

inline void StartJob::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&job_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&spec_) -
    reinterpret_cast<char*>(&job_id_)) + sizeof(spec_));
}

StartJob::~StartJob() {
  // @@protoc_insertion_point(destructor:palantir.StartJob)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StartJob::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete job_id_;
  if (this != internal_default_instance()) delete spec_;
}

void StartJob::ArenaDtor(void* object) {
  StartJob* _this = reinterpret_cast< StartJob* >(object);
  (void)_this;
}
void StartJob::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartJob::Clear() {
// @@protoc_insertion_point(message_clear_start:palantir.StartJob)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && job_id_ != nullptr) {
    delete job_id_;
  }
  job_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartJob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palantir.JobId job_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_job_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .palantir.ComputeSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartJob::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palantir.StartJob)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palantir.JobId job_id = 1;
  if (this->_internal_has_job_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::job_id(this), target, stream);
  }

  // .palantir.ComputeSpec spec = 2;
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palantir.StartJob)
  return target;
}

size_t StartJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palantir.StartJob)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .palantir.JobId job_id = 1;
  if (this->_internal_has_job_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *job_id_);
  }

  // .palantir.ComputeSpec spec = 2;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartJob::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StartJob::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartJob::GetClassData() const { return &_class_data_; }

void StartJob::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StartJob *>(to)->MergeFrom(
      static_cast<const StartJob &>(from));
}


void StartJob::MergeFrom(const StartJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palantir.StartJob)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_job_id()) {
    _internal_mutable_job_id()->::palantir::JobId::MergeFrom(from._internal_job_id());
  }
  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::palantir::ComputeSpec::MergeFrom(from._internal_spec());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartJob::CopyFrom(const StartJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palantir.StartJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartJob::IsInitialized() const {
  return true;
}

void StartJob::InternalSwap(StartJob* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartJob, spec_)
      + sizeof(StartJob::spec_)
      - PROTOBUF_FIELD_OFFSET(StartJob, job_id_)>(
          reinterpret_cast<char*>(&job_id_),
          reinterpret_cast<char*>(&other->job_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartJob::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_palantir_2eproto_getter, &descriptor_table_palantir_2eproto_once,
      file_level_metadata_palantir_2eproto[8]);
}

// ===================================================================

class CapabilitiesRequest::_Internal {
 public:
};

CapabilitiesRequest::CapabilitiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:palantir.CapabilitiesRequest)
}
CapabilitiesRequest::CapabilitiesRequest(const CapabilitiesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palantir.CapabilitiesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CapabilitiesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CapabilitiesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CapabilitiesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_palantir_2eproto_getter, &descriptor_table_palantir_2eproto_once,
      file_level_metadata_palantir_2eproto[9]);
}

// ===================================================================

class Capabilities::_Internal {
 public:
};

Capabilities::Capabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  supported_features_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palantir.Capabilities)
}
Capabilities::Capabilities(const Capabilities& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      supported_features_(from.supported_features_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  protocol_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    protocol_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_protocol_version().empty()) {
    protocol_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_protocol_version(), 
      GetArenaForAllocation());
  }
  max_concurrency_ = from.max_concurrency_;
  // @@protoc_insertion_point(copy_constructor:palantir.Capabilities)
}

inline void Capabilities::SharedCtor() {
protocol_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  protocol_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
max_concurrency_ = 0;
}

Capabilities::~Capabilities() {
  // @@protoc_insertion_point(destructor:palantir.Capabilities)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Capabilities::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  protocol_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Capabilities::ArenaDtor(void* object) {
  Capabilities* _this = reinterpret_cast< Capabilities* >(object);
  (void)_this;
}
void Capabilities::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Capabilities::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Capabilities::Clear() {
// @@protoc_insertion_point(message_clear_start:palantir.Capabilities)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supported_features_.Clear();
  protocol_version_.ClearToEmpty();
  max_concurrency_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Capabilities::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 max_concurrency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          max_concurrency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string supported_features = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_supported_features();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palantir.Capabilities.supported_features"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string protocol_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_protocol_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "palantir.Capabilities.protocol_version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Capabilities::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palantir.Capabilities)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_concurrency = 1;
  if (this->_internal_max_concurrency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_concurrency(), target);
  }

  // repeated string supported_features = 2;
  for (int i = 0, n = this->_internal_supported_features_size(); i < n; i++) {
    const auto& s = this->_internal_supported_features(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palantir.Capabilities.supported_features");
    target = stream->WriteString(2, s, target);
  }

  // string protocol_version = 3;
  if (!this->_internal_protocol_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol_version().data(), static_cast<int>(this->_internal_protocol_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palantir.Capabilities.protocol_version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_protocol_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palantir.Capabilities)
  return target;
}

size_t Capabilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palantir.Capabilities)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string supported_features = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(supported_features_.size());
  for (int i = 0, n = supported_features_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      supported_features_.Get(i));
  }

  // string protocol_version = 3;
  if (!this->_internal_protocol_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol_version());
  }

  // int32 max_concurrency = 1;
  if (this->_internal_max_concurrency() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_concurrency());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Capabilities::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Capabilities::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Capabilities::GetClassData() const { return &_class_data_; }

void Capabilities::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Capabilities *>(to)->MergeFrom(
      static_cast<const Capabilities &>(from));
}


void Capabilities::MergeFrom(const Capabilities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palantir.Capabilities)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  supported_features_.MergeFrom(from.supported_features_);
  if (!from._internal_protocol_version().empty()) {
    _internal_set_protocol_version(from._internal_protocol_version());
  }
  if (from._internal_max_concurrency() != 0) {
    _internal_set_max_concurrency(from._internal_max_concurrency());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Capabilities::CopyFrom(const Capabilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palantir.Capabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Capabilities::IsInitialized() const {
  return true;
}

void Capabilities::InternalSwap(Capabilities* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  supported_features_.InternalSwap(&other->supported_features_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &protocol_version_, lhs_arena,
      &other->protocol_version_, rhs_arena
  );
  swap(max_concurrency_, other->max_concurrency_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Capabilities::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_palantir_2eproto_getter, &descriptor_table_palantir_2eproto_once,
      file_level_metadata_palantir_2eproto[10]);
}

// ===================================================================

class Pong::_Internal {
 public:
};

Pong::Pong(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palantir.Pong)
}
Pong::Pong(const Pong& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ms_ = from.timestamp_ms_;
  // @@protoc_insertion_point(copy_constructor:palantir.Pong)
}

inline void Pong::SharedCtor() {
timestamp_ms_ = int64_t{0};
}

Pong::~Pong() {
  // @@protoc_insertion_point(destructor:palantir.Pong)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Pong::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Pong::ArenaDtor(void* object) {
  Pong* _this = reinterpret_cast< Pong* >(object);
  (void)_this;
}
void Pong::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pong::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Pong::Clear() {
// @@protoc_insertion_point(message_clear_start:palantir.Pong)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ms_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pong::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pong::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palantir.Pong)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp_ms = 1;
  if (this->_internal_timestamp_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palantir.Pong)
  return target;
}

size_t Pong::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palantir.Pong)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timestamp_ms = 1;
  if (this->_internal_timestamp_ms() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pong::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Pong::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pong::GetClassData() const { return &_class_data_; }

void Pong::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Pong *>(to)->MergeFrom(
      static_cast<const Pong &>(from));
}


void Pong::MergeFrom(const Pong& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palantir.Pong)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp_ms() != 0) {
    _internal_set_timestamp_ms(from._internal_timestamp_ms());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pong::CopyFrom(const Pong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palantir.Pong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pong::IsInitialized() const {
  return true;
}

void Pong::InternalSwap(Pong* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(timestamp_ms_, other->timestamp_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pong::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_palantir_2eproto_getter, &descriptor_table_palantir_2eproto_once,
      file_level_metadata_palantir_2eproto[11]);
}

// ===================================================================

class XYSineSpec::_Internal {
 public:
};

XYSineSpec::XYSineSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palantir.XYSineSpec)
}
XYSineSpec::XYSineSpec(const XYSineSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&amplitude_, &from.amplitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&n_samples_) -
    reinterpret_cast<char*>(&amplitude_)) + sizeof(n_samples_));
  // @@protoc_insertion_point(copy_constructor:palantir.XYSineSpec)
}

inline void XYSineSpec::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&amplitude_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&n_samples_) -
    reinterpret_cast<char*>(&amplitude_)) + sizeof(n_samples_));
}

XYSineSpec::~XYSineSpec() {
  // @@protoc_insertion_point(destructor:palantir.XYSineSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void XYSineSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void XYSineSpec::ArenaDtor(void* object) {
  XYSineSpec* _this = reinterpret_cast< XYSineSpec* >(object);
  (void)_this;
}
void XYSineSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void XYSineSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void XYSineSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:palantir.XYSineSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&amplitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n_samples_) -
      reinterpret_cast<char*>(&amplitude_)) + sizeof(n_samples_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XYSineSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double amplitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          amplitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double frequency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double phase = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          phase_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 cycles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          cycles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 n_samples = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          n_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* XYSineSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palantir.XYSineSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double amplitude = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amplitude = this->_internal_amplitude();
  uint64_t raw_amplitude;
  memcpy(&raw_amplitude, &tmp_amplitude, sizeof(tmp_amplitude));
  if (raw_amplitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_amplitude(), target);
  }

  // double frequency = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_frequency = this->_internal_frequency();
  uint64_t raw_frequency;
  memcpy(&raw_frequency, &tmp_frequency, sizeof(tmp_frequency));
  if (raw_frequency != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_frequency(), target);
  }

  // double phase = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_phase = this->_internal_phase();
  uint64_t raw_phase;
  memcpy(&raw_phase, &tmp_phase, sizeof(tmp_phase));
  if (raw_phase != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_phase(), target);
  }

  // int32 cycles = 4;
  if (this->_internal_cycles() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_cycles(), target);
  }

  // int32 n_samples = 5;
  if (this->_internal_n_samples() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_n_samples(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palantir.XYSineSpec)
  return target;
}

size_t XYSineSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palantir.XYSineSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double amplitude = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amplitude = this->_internal_amplitude();
  uint64_t raw_amplitude;
  memcpy(&raw_amplitude, &tmp_amplitude, sizeof(tmp_amplitude));
  if (raw_amplitude != 0) {
    total_size += 1 + 8;
  }

  // double frequency = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_frequency = this->_internal_frequency();
  uint64_t raw_frequency;
  memcpy(&raw_frequency, &tmp_frequency, sizeof(tmp_frequency));
  if (raw_frequency != 0) {
    total_size += 1 + 8;
  }

  // double phase = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_phase = this->_internal_phase();
  uint64_t raw_phase;
  memcpy(&raw_phase, &tmp_phase, sizeof(tmp_phase));
  if (raw_phase != 0) {
    total_size += 1 + 8;
  }

  // int32 cycles = 4;
  if (this->_internal_cycles() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_cycles());
  }

  // int32 n_samples = 5;
  if (this->_internal_n_samples() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_n_samples());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData XYSineSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    XYSineSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*XYSineSpec::GetClassData() const { return &_class_data_; }

void XYSineSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<XYSineSpec *>(to)->MergeFrom(
      static_cast<const XYSineSpec &>(from));
}


void XYSineSpec::MergeFrom(const XYSineSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palantir.XYSineSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amplitude = from._internal_amplitude();
  uint64_t raw_amplitude;
  memcpy(&raw_amplitude, &tmp_amplitude, sizeof(tmp_amplitude));
  if (raw_amplitude != 0) {
    _internal_set_amplitude(from._internal_amplitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_frequency = from._internal_frequency();
  uint64_t raw_frequency;
  memcpy(&raw_frequency, &tmp_frequency, sizeof(tmp_frequency));
  if (raw_frequency != 0) {
    _internal_set_frequency(from._internal_frequency());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_phase = from._internal_phase();
  uint64_t raw_phase;
  memcpy(&raw_phase, &tmp_phase, sizeof(tmp_phase));
  if (raw_phase != 0) {
    _internal_set_phase(from._internal_phase());
  }
  if (from._internal_cycles() != 0) {
    _internal_set_cycles(from._internal_cycles());
  }
  if (from._internal_n_samples() != 0) {
    _internal_set_n_samples(from._internal_n_samples());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void XYSineSpec::CopyFrom(const XYSineSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palantir.XYSineSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XYSineSpec::IsInitialized() const {
  return true;
}

void XYSineSpec::InternalSwap(XYSineSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(XYSineSpec, n_samples_)
      + sizeof(XYSineSpec::n_samples_)
      - PROTOBUF_FIELD_OFFSET(XYSineSpec, amplitude_)>(
          reinterpret_cast<char*>(&amplitude_),
          reinterpret_cast<char*>(&other->amplitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata XYSineSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_palantir_2eproto_getter, &descriptor_table_palantir_2eproto_once,
      file_level_metadata_palantir_2eproto[12]);
}

// ===================================================================

class XYSineResult::_Internal {
 public:
};

XYSineResult::XYSineResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  x_values_(arena),
  y_values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:palantir.XYSineResult)
}
XYSineResult::XYSineResult(const XYSineResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      x_values_(from.x_values_),
      y_values_(from.y_values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&series_points_, &from.series_points_,
    static_cast<size_t>(reinterpret_cast<char*>(&downsampling_enabled_) -
    reinterpret_cast<char*>(&series_points_)) + sizeof(downsampling_enabled_));
  // @@protoc_insertion_point(copy_constructor:palantir.XYSineResult)
}

inline void XYSineResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&series_points_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&downsampling_enabled_) -
    reinterpret_cast<char*>(&series_points_)) + sizeof(downsampling_enabled_));
}

XYSineResult::~XYSineResult() {
  // @@protoc_insertion_point(destructor:palantir.XYSineResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void XYSineResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void XYSineResult::ArenaDtor(void* object) {
  XYSineResult* _this = reinterpret_cast< XYSineResult* >(object);
  (void)_this;
}
void XYSineResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void XYSineResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void XYSineResult::Clear() {
// @@protoc_insertion_point(message_clear_start:palantir.XYSineResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  x_values_.Clear();
  y_values_.Clear();
  ::memset(&series_points_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&downsampling_enabled_) -
      reinterpret_cast<char*>(&series_points_)) + sizeof(downsampling_enabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XYSineResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double x_values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_x_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_x_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double y_values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_y_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_y_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 series_points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          series_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 series_points_effective = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          series_points_effective_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool downsampling_enabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          downsampling_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* XYSineResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palantir.XYSineResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double x_values = 1;
  if (this->_internal_x_values_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_x_values(), target);
  }

  // repeated double y_values = 2;
  if (this->_internal_y_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_y_values(), target);
  }

  // int32 series_points = 3;
  if (this->_internal_series_points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_series_points(), target);
  }

  // int32 series_points_effective = 4;
  if (this->_internal_series_points_effective() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_series_points_effective(), target);
  }

  // bool downsampling_enabled = 5;
  if (this->_internal_downsampling_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_downsampling_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palantir.XYSineResult)
  return target;
}

size_t XYSineResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palantir.XYSineResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double x_values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_x_values_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double y_values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_y_values_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // int32 series_points = 3;
  if (this->_internal_series_points() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_series_points());
  }

  // int32 series_points_effective = 4;
  if (this->_internal_series_points_effective() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_series_points_effective());
  }

  // bool downsampling_enabled = 5;
  if (this->_internal_downsampling_enabled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData XYSineResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    XYSineResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*XYSineResult::GetClassData() const { return &_class_data_; }

void XYSineResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<XYSineResult *>(to)->MergeFrom(
      static_cast<const XYSineResult &>(from));
}


void XYSineResult::MergeFrom(const XYSineResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:palantir.XYSineResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  x_values_.MergeFrom(from.x_values_);
  y_values_.MergeFrom(from.y_values_);
  if (from._internal_series_points() != 0) {
    _internal_set_series_points(from._internal_series_points());
  }
  if (from._internal_series_points_effective() != 0) {
    _internal_set_series_points_effective(from._internal_series_points_effective());
  }
  if (from._internal_downsampling_enabled() != 0) {
    _internal_set_downsampling_enabled(from._internal_downsampling_enabled());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void XYSineResult::CopyFrom(const XYSineResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palantir.XYSineResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XYSineResult::IsInitialized() const {
  return true;
}

void XYSineResult::InternalSwap(XYSineResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  x_values_.InternalSwap(&other->x_values_);
  y_values_.InternalSwap(&other->y_values_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(XYSineResult, downsampling_enabled_)
      + sizeof(XYSineResult::downsampling_enabled_)
      - PROTOBUF_FIELD_OFFSET(XYSineResult, series_points_)>(
          reinterpret_cast<char*>(&series_points_),
          reinterpret_cast<char*>(&other->series_points_));
}

::PROTOBUF_NAMESPACE_ID::Metadata XYSineResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_palantir_2eproto_getter, &descriptor_table_palantir_2eproto_once,
      file_level_metadata_palantir_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace palantir
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::palantir::JobId* Arena::CreateMaybeMessage< ::palantir::JobId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palantir::JobId >(arena);
}
template<> PROTOBUF_NOINLINE ::palantir::ComputeSpec_ParamsEntry_DoNotUse* Arena::CreateMaybeMessage< ::palantir::ComputeSpec_ParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palantir::ComputeSpec_ParamsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::palantir::ComputeSpec* Arena::CreateMaybeMessage< ::palantir::ComputeSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palantir::ComputeSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::palantir::StartReply* Arena::CreateMaybeMessage< ::palantir::StartReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palantir::StartReply >(arena);
}
template<> PROTOBUF_NOINLINE ::palantir::Progress* Arena::CreateMaybeMessage< ::palantir::Progress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palantir::Progress >(arena);
}
template<> PROTOBUF_NOINLINE ::palantir::ResultMeta* Arena::CreateMaybeMessage< ::palantir::ResultMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palantir::ResultMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::palantir::DataChunk* Arena::CreateMaybeMessage< ::palantir::DataChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palantir::DataChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::palantir::Cancel* Arena::CreateMaybeMessage< ::palantir::Cancel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palantir::Cancel >(arena);
}
template<> PROTOBUF_NOINLINE ::palantir::StartJob* Arena::CreateMaybeMessage< ::palantir::StartJob >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palantir::StartJob >(arena);
}
template<> PROTOBUF_NOINLINE ::palantir::CapabilitiesRequest* Arena::CreateMaybeMessage< ::palantir::CapabilitiesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palantir::CapabilitiesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palantir::Capabilities* Arena::CreateMaybeMessage< ::palantir::Capabilities >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palantir::Capabilities >(arena);
}
template<> PROTOBUF_NOINLINE ::palantir::Pong* Arena::CreateMaybeMessage< ::palantir::Pong >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palantir::Pong >(arena);
}
template<> PROTOBUF_NOINLINE ::palantir::XYSineSpec* Arena::CreateMaybeMessage< ::palantir::XYSineSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palantir::XYSineSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::palantir::XYSineResult* Arena::CreateMaybeMessage< ::palantir::XYSineResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palantir::XYSineResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
